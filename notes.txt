Source: Programming with Mosh - https://www.youtube.com/watch?v=poQXNp9ItL4
Purpose of Redux:
- state management library
- state is stored inside a central repo. A javascript object called "Store"
- data is updated from the Store (single source of truth)

Pros:
- makes state changes predictable
- centralizes state
- can easily debug (redux chrome dev tool)
- perserve page stage
- implement undo/redo 
- many of add-ons

Cons:
- complexity 
- verbosity. boilerplate needed 

When Not to Use: 
- tight budget
- small to med size app
- simple ui/data flow
- static data

Reducer Function:
function reducer(store, action) {
  const updated = {...store};
}
- a function that takes current instance of store and returns updated store
- action (aka event). plain objects that describes what happened
- reducer is like an event handler. pure functions

Steps to build Redux app:
- design the store
- define the actions
- create reducer
- set up the store

Design Store:
Array of objects
[
  {
    id: 1,
    description: "...",
    resolved: false
  },
  {...},
  {...},
]

Define the Actions:
- Add a bug
- mark it as resolved
- delete a bug

** only type is mandatory. "payload" convention comes from flux
{ 
  type: "ADD_BUG",  <- common convention. uppercase and underscore
  payload: {
    description: "..." <--value stored in desc properity
  }
}
****
{
  type: "REMOVE_BUG",
  payload: { <-- payload contains minimum info needed about an action
    id: 1
  }
}

Create Reducer:

Redux WorkFlow:
- Dispatch action -> store calls reducer with current state and action
- based on action we get the new state

Immer: <- use instead of spread operator
- npm install Immer
- import { produce } from 'immer'
let anime = { title: "Inuyasha" }
const publish(anime) {
  return produce(anime, draftAnime => {
    draftAnime.isPublished = true;
  });
}
let updated = publish(anime);
console.log("anime:", anime)
console.log("updated:", updated)
